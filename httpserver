#!/usr/bin/env python3
from argparse import ArgumentParser
import requests
import zlib
import threading
from socket import socket, AF_INET, SOCK_STREAM, SOCK_DGRAM
import sqlite3

# parse arguments and store them accordingly
parser = ArgumentParser(
    prog="deployCDN", description="deploy necessary resources to set up a CDN"
)
parser.add_argument("-p", dest="port")
parser.add_argument("-o", dest="origin")
parser.add_argument("-n", dest="name")
parser.add_argument("-u", dest="username")
parser.add_argument("-i", dest="keyfile")

args = parser.parse_args()

if args.port is None:
    raise ValueError("No value for port supplied")
if args.origin is None:
    raise ValueError("No value for origin supplied")

PORT = args.port
ORIGIN = args.origin

connect_db = sqlite3.connect("web_cache.db")
db = connect_db.cursor()
db.execute("CREATE TABLE IF NOT EXISTS CACHE (Path TEXT, Data BLOB);")


def get_data(path):
    connect_db_thread = sqlite3.connect("web_cache.db")
    db_thread = connect_db_thread.cursor()
    # check if path starts with forward slash
    if len(path) > 0 and path[0] == "/":
        path = path[1:]

    # attempt to get compressed data from the cache db_thread
    db_thread.execute("SELECT Data FROM Cache WHERE Path = :Path", {"Path": path})
    data_or_none = db_thread.fetchone()

    # get data from origin if None or unzip and return the cached data
    if data_or_none == None:
        print(f"Getting {path} from origin")
        url = "http://" + ORIGIN + ":8080/" + path
        url_data = requests.get(url)
        return url_data.text
    else:
        print(f"{path} FOUND IN CACHE")
        unzipped_data = zlib.decompress(data_or_none[0])
        return unzipped_data.decode("utf-8")


def serve_client(client_sock: socket, ret_addr):
    req = client_sock.recvfrom(10000)
    print(f"Threaded and accepted request of: {req}")
    # extract path from request
    req_type = str(req[0], "ascii").split("\r\n")[0]
    req_toks = req_type.split()
    path = ""
    if req_toks[0] == "GET":
        path = req_toks[1]
    print(f"Getting path: {path}")
    response = ""
    if path == "/grading/beacon":
        response = (
            "HTTP/1.1 204 No Content \r\n"
            + "Content-Length: 0\nContent-Type: text/html\n\n"
        )
    else:
        data = get_data(path)
        response = (
            "HTTP/1.1 200 OK \r\n"
            + "Content-Length: "
            + str(len(data))
            + "\n"
            + "Content-Type: text/html\n\n"
            + data
        )
    print(f"Sending content for {path}")
    client_sock.send(response.encode("utf-8"))
    client_sock.close()


# create socket to serve data
# set up server socket
sock = socket(AF_INET, SOCK_DGRAM)
sock.connect(("10.0.0.0", 0))
IP = sock.getsockname()[0]
sock.close()
http_sock = socket(AF_INET, SOCK_STREAM)
http_sock.bind((IP, int(PORT)))
http_sock.listen(1)
print(f"Set up connection at IP: {IP} on Port: {PORT}")

while True:
    print(f"Waiting for connection")
    client_sock, ret_addr = http_sock.accept()
    print(f"Accepted connection from {ret_addr}, attempting to thread")
    new_thread = threading.Thread(target=serve_client, args=[client_sock, ret_addr])
    new_thread.start()
